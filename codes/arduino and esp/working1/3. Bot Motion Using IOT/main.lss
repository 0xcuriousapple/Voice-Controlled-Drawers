
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000418  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000008f  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000049c  00000000  00000000  0000051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e0  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000411  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000140  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003ad  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 0a 02 	jmp	0x414	; 0x414 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SerialBegin>:
#include <inttypes.h>

//This function is used to initialize the USART
//at a given UBRR value
void SerialBegin(long baud_rate)
{
  6c:	9b 01       	movw	r18, r22
  6e:	ac 01       	movw	r20, r24

   //Set Baud rate
   uint16_t ubrr_value = (1000000/baud_rate) - 1;
  70:	60 e4       	ldi	r22, 0x40	; 64
  72:	72 e4       	ldi	r23, 0x42	; 66
  74:	8f e0       	ldi	r24, 0x0F	; 15
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__divmodsi4>
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	30 40       	sbci	r19, 0x00	; 0
   UBRRL = ubrr_value;
  80:	29 b9       	out	0x09, r18	; 9
   UBRRH = (ubrr_value>>8);
  82:	30 bd       	out	0x20, r19	; 32
   //No Parity
   //1 StopBit
   //char size 8


   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10


}
  8c:	08 95       	ret

0000008e <SerialReadChar>:
//available.
char SerialReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
  8e:	5f 9b       	sbis	0x0b, 7	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <SerialReadChar>
   {
		;
      //Do nothing
   }
   //Data recieved in USART
   return UDR;
  92:	8c b1       	in	r24, 0x0c	; 12
}
  94:	08 95       	ret

00000096 <SerialWriteChar>:
//This fuction prints a single character.
void SerialWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <SerialWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  9a:	8c b9       	out	0x0c, r24	; 12
}
  9c:	08 95       	ret

0000009e <main>:
//----------------------------------------------------


void main()
{
DDRC=0b11111100;
  9e:	8c ef       	ldi	r24, 0xFC	; 252
  a0:	84 bb       	out	0x14, r24	; 20
unsigned char data;
SerialBegin(9600);
  a2:	60 e8       	ldi	r22, 0x80	; 128
  a4:	75 e2       	ldi	r23, 0x25	; 37
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <SerialBegin>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	20 e9       	ldi	r18, 0x90	; 144
  b0:	31 e0       	ldi	r19, 0x01	; 1
					PORTC=0b10000000;
					_delay_ms(1000);
					PORTC=0x00;
					break;
				case 'b' :
					PORTC=0b01000000;
  b2:	70 e4       	ldi	r23, 0x40	; 64
					_delay_ms(1000);
					PORTC=0x00;

					break;
				case 'c':
					PORTC=0b00100000;
  b4:	60 e2       	ldi	r22, 0x20	; 32
					_delay_ms(1000);
					PORTC=0x00;

					break;
				case 'd' :
					PORTC=0b00010000;
  b6:	50 e1       	ldi	r21, 0x10	; 16
			data = SerialReadChar();

			switch(data)
			{
				case 'a' :
					PORTC=0b10000000;
  b8:	40 e8       	ldi	r20, 0x80	; 128
//available.
char SerialReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <main+0x1c>
   {
		;
      //Do nothing
   }
   //Data recieved in USART
   return UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
SerialBegin(9600);
while(1)
		{
			data = SerialReadChar();

			switch(data)
  c0:	82 36       	cpi	r24, 0x62	; 98
  c2:	99 f0       	breq	.+38     	; 0xea <main+0x4c>
  c4:	83 36       	cpi	r24, 0x63	; 99
  c6:	18 f4       	brcc	.+6      	; 0xce <main+0x30>
  c8:	81 36       	cpi	r24, 0x61	; 97
  ca:	51 f5       	brne	.+84     	; 0x120 <main+0x82>
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <main+0x3a>
  ce:	83 36       	cpi	r24, 0x63	; 99
  d0:	a9 f0       	breq	.+42     	; 0xfc <main+0x5e>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	29 f5       	brne	.+74     	; 0x120 <main+0x82>
  d6:	1b c0       	rjmp	.+54     	; 0x10e <main+0x70>
			{
				case 'a' :
					PORTC=0b10000000;
  d8:	45 bb       	out	0x15, r20	; 21
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	97 e2       	ldi	r25, 0x27	; 39
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x40>
  e8:	22 c0       	rjmp	.+68     	; 0x12e <main+0x90>
					_delay_ms(1000);
					PORTC=0x00;
					break;
				case 'b' :
					PORTC=0b01000000;
  ea:	75 bb       	out	0x15, r23	; 21
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	f9 01       	movw	r30, r18
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x52>
  fa:	19 c0       	rjmp	.+50     	; 0x12e <main+0x90>
					_delay_ms(1000);
					PORTC=0x00;

					break;
				case 'c':
					PORTC=0b00100000;
  fc:	65 bb       	out	0x15, r22	; 21
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	97 e2       	ldi	r25, 0x27	; 39
 102:	f9 01       	movw	r30, r18
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <main+0x64>
 10c:	10 c0       	rjmp	.+32     	; 0x12e <main+0x90>
					_delay_ms(1000);
					PORTC=0x00;

					break;
				case 'd' :
					PORTC=0b00010000;
 10e:	55 bb       	out	0x15, r21	; 21
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	97 e2       	ldi	r25, 0x27	; 39
 114:	f9 01       	movw	r30, r18
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d9 f7       	brne	.-10     	; 0x114 <main+0x76>
 11e:	07 c0       	rjmp	.+14     	; 0x12e <main+0x90>
					_delay_ms(1000);
					PORTC=0x00;

					break;
 120:	88 ee       	ldi	r24, 0xE8	; 232
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x86>
				default :
				 {
					_delay_ms(100);
					LED = 0x00;
 12e:	15 ba       	out	0x15, r1	; 21
 130:	88 e8       	ldi	r24, 0x88	; 136
 132:	93 e1       	ldi	r25, 0x13	; 19
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	09 f4       	brne	.+2      	; 0x140 <main+0xa2>
 13e:	bd cf       	rjmp	.-134    	; 0xba <main+0x1c>
 140:	f9 cf       	rjmp	.-14     	; 0x134 <main+0x96>

00000142 <SerialWriteLong>:
  
}

//This function prints an unsigned long int.
void SerialWriteLong(unsigned long int data)
{
 142:	6f 92       	push	r6
 144:	7f 92       	push	r7
 146:	8f 92       	push	r8
 148:	9f 92       	push	r9
 14a:	af 92       	push	r10
 14c:	bf 92       	push	r11
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	7b 01       	movw	r14, r22
 164:	8c 01       	movw	r16, r24
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
   {
		SerialWriteChar(temp[i]+'0');
   }
}
 166:	6d b6       	in	r6, 0x3d	; 61
 168:	7e b6       	in	r7, 0x3e	; 62
  
}

//This function prints an unsigned long int.
void SerialWriteLong(unsigned long int data)
{
 16a:	cc 24       	eor	r12, r12
 16c:	dd 24       	eor	r13, r13
 16e:	0d c0       	rjmp	.+26     	; 0x18a <SerialWriteLong+0x48>
	unsigned long x = data;
	
	//count number of digits
	while(x)
	{
		count++;
 170:	08 94       	sec
 172:	c1 1c       	adc	r12, r1
 174:	d1 1c       	adc	r13, r1
		x = x/10;
 176:	2a e0       	ldi	r18, 0x0A	; 10
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	0e 94 b9 01 	call	0x372	; 0x372 <__udivmodsi4>
 182:	c9 01       	movw	r24, r18
 184:	da 01       	movw	r26, r20
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
{
	int i = 0, count = 0;	
	unsigned long x = data;
	
	//count number of digits
	while(x)
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	81 05       	cpc	r24, r1
 190:	91 05       	cpc	r25, r1
 192:	71 f7       	brne	.-36     	; 0x170 <SerialWriteLong+0x2e>
	{
		count++;
		x = x/10;
	}
	
   int temp[count];
 194:	c6 01       	movw	r24, r12
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	2d b7       	in	r18, 0x3d	; 61
 19c:	3e b7       	in	r19, 0x3e	; 62
 19e:	28 1b       	sub	r18, r24
 1a0:	39 0b       	sbc	r19, r25
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	3e bf       	out	0x3e, r19	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	2d bf       	out	0x3d, r18	; 61
 1ac:	8d b6       	in	r8, 0x3d	; 61
 1ae:	9e b6       	in	r9, 0x3e	; 62
 1b0:	08 94       	sec
 1b2:	81 1c       	adc	r8, r1
 1b4:	91 1c       	adc	r9, r1
 1b6:	54 01       	movw	r10, r8
 1b8:	18 c0       	rjmp	.+48     	; 0x1ea <SerialWriteLong+0xa8>
   
   //store each digit in temp array
   while(data)
   {
	temp[i] = data%10;
 1ba:	c8 01       	movw	r24, r16
 1bc:	b7 01       	movw	r22, r14
 1be:	2a e0       	ldi	r18, 0x0A	; 10
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	0e 94 b9 01 	call	0x372	; 0x372 <__udivmodsi4>
 1ca:	f5 01       	movw	r30, r10
 1cc:	61 93       	st	Z+, r22
 1ce:	71 93       	st	Z+, r23
 1d0:	5f 01       	movw	r10, r30
	data = data/10;
 1d2:	c8 01       	movw	r24, r16
 1d4:	b7 01       	movw	r22, r14
 1d6:	2a e0       	ldi	r18, 0x0A	; 10
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	0e 94 b9 01 	call	0x372	; 0x372 <__udivmodsi4>
 1e2:	c9 01       	movw	r24, r18
 1e4:	da 01       	movw	r26, r20
 1e6:	7c 01       	movw	r14, r24
 1e8:	8d 01       	movw	r16, r26
	}
	
   int temp[count];
   
   //store each digit in temp array
   while(data)
 1ea:	e1 14       	cp	r14, r1
 1ec:	f1 04       	cpc	r15, r1
 1ee:	01 05       	cpc	r16, r1
 1f0:	11 05       	cpc	r17, r1
 1f2:	19 f7       	brne	.-58     	; 0x1ba <SerialWriteLong+0x78>
 1f4:	f6 01       	movw	r30, r12
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	e8 0d       	add	r30, r8
 1fe:	f9 1d       	adc	r31, r9
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	08 c0       	rjmp	.+16     	; 0x216 <SerialWriteLong+0xd4>
   
   
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
   {
		SerialWriteChar(temp[i]+'0');
 206:	80 81       	ld	r24, Z
//This fuction prints a single character.
void SerialWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <SerialWriteLong+0xc6>
   
   
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
   {
		SerialWriteChar(temp[i]+'0');
 20c:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 20e:	8c b9       	out	0x0c, r24	; 12
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	32 97       	sbiw	r30, 0x02	; 2
	i++;
   }
   
   
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
 216:	2c 15       	cp	r18, r12
 218:	3d 05       	cpc	r19, r13
 21a:	a9 f7       	brne	.-22     	; 0x206 <SerialWriteLong+0xc4>
   {
		SerialWriteChar(temp[i]+'0');
   }
}
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	7e be       	out	0x3e, r7	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	6d be       	out	0x3d, r6	; 61
 226:	cf 91       	pop	r28
 228:	df 91       	pop	r29
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	bf 90       	pop	r11
 238:	af 90       	pop	r10
 23a:	9f 90       	pop	r9
 23c:	8f 90       	pop	r8
 23e:	7f 90       	pop	r7
 240:	6f 90       	pop	r6
 242:	08 95       	ret

00000244 <SerialWriteInt>:
		
}

//This function prints a signed integer.
void SerialWriteInt(int data)
{
 244:	af 92       	push	r10
 246:	bf 92       	push	r11
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	fc 01       	movw	r30, r24
   {
		SerialWriteChar(temp[i]+'0');
   }

  
}
 25e:	ad b6       	in	r10, 0x3d	; 61
 260:	be b6       	in	r11, 0x3e	; 62
//This function prints a signed integer.
void SerialWriteInt(int data)
{
	int i = 0, count = 0;
	
	if(data<0)
 262:	97 ff       	sbrs	r25, 7
 264:	07 c0       	rjmp	.+14     	; 0x274 <SerialWriteInt+0x30>
//This fuction prints a single character.
void SerialWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 266:	5d 9b       	sbis	0x0b, 5	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <SerialWriteInt+0x22>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 26a:	8d e2       	ldi	r24, 0x2D	; 45
 26c:	8c b9       	out	0x0c, r24	; 12
	int i = 0, count = 0;
	
	if(data<0)
	{
		SerialWriteChar('-');
		data*=-1;
 26e:	f0 95       	com	r31
 270:	e1 95       	neg	r30
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	cf 01       	movw	r24, r30
 276:	00 e0       	ldi	r16, 0x00	; 0
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	07 c0       	rjmp	.+14     	; 0x28a <SerialWriteInt+0x46>
	int x = data;
	
	//count number of digits
	while(x)
	{
		count++;
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
		x = x/10;
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 a6 01 	call	0x34c	; 0x34c <__divmodhi4>
 288:	cb 01       	movw	r24, r22
	}
	
	int x = data;
	
	//count number of digits
	while(x)
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	b9 f7       	brne	.-18     	; 0x27c <SerialWriteInt+0x38>
	{
		count++;
		x = x/10;
	}
	
   int temp[count];
 28e:	c8 01       	movw	r24, r16
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	2d b7       	in	r18, 0x3d	; 61
 296:	3e b7       	in	r19, 0x3e	; 62
 298:	28 1b       	sub	r18, r24
 29a:	39 0b       	sbc	r19, r25
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	3e bf       	out	0x3e, r19	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	2d bf       	out	0x3d, r18	; 61
 2a6:	cd b6       	in	r12, 0x3d	; 61
 2a8:	de b6       	in	r13, 0x3e	; 62
 2aa:	08 94       	sec
 2ac:	c1 1c       	adc	r12, r1
 2ae:	d1 1c       	adc	r13, r1
 2b0:	76 01       	movw	r14, r12
 2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <SerialWriteInt+0x8e>
   
   //store each digit in temp array
   while(data)
   {
	temp[i] = data%10;
 2b4:	cf 01       	movw	r24, r30
 2b6:	6a e0       	ldi	r22, 0x0A	; 10
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 a6 01 	call	0x34c	; 0x34c <__divmodhi4>
 2be:	d7 01       	movw	r26, r14
 2c0:	8d 93       	st	X+, r24
 2c2:	9d 93       	st	X+, r25
 2c4:	7d 01       	movw	r14, r26
	data = data/10;
 2c6:	cf 01       	movw	r24, r30
 2c8:	6a e0       	ldi	r22, 0x0A	; 10
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 a6 01 	call	0x34c	; 0x34c <__divmodhi4>
 2d0:	fb 01       	movw	r30, r22
	}
	
   int temp[count];
   
   //store each digit in temp array
   while(data)
 2d2:	30 97       	sbiw	r30, 0x00	; 0
 2d4:	79 f7       	brne	.-34     	; 0x2b4 <SerialWriteInt+0x70>
 2d6:	f8 01       	movw	r30, r16
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	ec 0d       	add	r30, r12
 2e0:	fd 1d       	adc	r31, r13
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <SerialWriteInt+0xb4>
   
   
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
   {
		SerialWriteChar(temp[i]+'0');
 2e8:	80 81       	ld	r24, Z
//This fuction prints a single character.
void SerialWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 2ea:	5d 9b       	sbis	0x0b, 5	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <SerialWriteInt+0xa6>
   
   
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
   {
		SerialWriteChar(temp[i]+'0');
 2ee:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 2f0:	8c b9       	out	0x0c, r24	; 12
 2f2:	2f 5f       	subi	r18, 0xFF	; 255
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
 2f6:	32 97       	sbiw	r30, 0x02	; 2
	i++;
   }
   
   
   //print each digit by typecasting to character
   for(i = count-1; i>=0 ; i--)
 2f8:	20 17       	cp	r18, r16
 2fa:	31 07       	cpc	r19, r17
 2fc:	a9 f7       	brne	.-22     	; 0x2e8 <SerialWriteInt+0xa4>
   {
		SerialWriteChar(temp[i]+'0');
   }

  
}
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	be be       	out	0x3e, r11	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	ad be       	out	0x3d, r10	; 61
 308:	cf 91       	pop	r28
 30a:	df 91       	pop	r29
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	df 90       	pop	r13
 316:	cf 90       	pop	r12
 318:	bf 90       	pop	r11
 31a:	af 90       	pop	r10
 31c:	08 95       	ret

0000031e <SerialWriteString>:


//This function prints a string. Pass in double inverted commas or a character array.
void SerialWriteString(char string[])
{
	for (int i=0; i<strlen(string); i++) 
 31e:	dc 01       	movw	r26, r24
 320:	0d 90       	ld	r0, X+
 322:	00 20       	and	r0, r0
 324:	e9 f7       	brne	.-6      	; 0x320 <SerialWriteString+0x2>
 326:	11 97       	sbiw	r26, 0x01	; 1
 328:	a8 1b       	sub	r26, r24
 32a:	b9 0b       	sbc	r27, r25
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	09 c0       	rjmp	.+18     	; 0x344 <SerialWriteString+0x26>
	{
			SerialWriteChar(string[i]);
 332:	fc 01       	movw	r30, r24
 334:	e2 0f       	add	r30, r18
 336:	f3 1f       	adc	r31, r19
 338:	e0 81       	ld	r30, Z
//This fuction prints a single character.
void SerialWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 33a:	5d 9b       	sbis	0x0b, 5	; 11
 33c:	fe cf       	rjmp	.-4      	; 0x33a <SerialWriteString+0x1c>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 33e:	ec b9       	out	0x0c, r30	; 12


//This function prints a string. Pass in double inverted commas or a character array.
void SerialWriteString(char string[])
{
	for (int i=0; i<strlen(string); i++) 
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	2a 17       	cp	r18, r26
 346:	3b 07       	cpc	r19, r27
 348:	a0 f3       	brcs	.-24     	; 0x332 <SerialWriteString+0x14>
	{
			SerialWriteChar(string[i]);
	}
		
		
}
 34a:	08 95       	ret

0000034c <__divmodhi4>:
 34c:	97 fb       	bst	r25, 7
 34e:	09 2e       	mov	r0, r25
 350:	07 26       	eor	r0, r23
 352:	0a d0       	rcall	.+20     	; 0x368 <__divmodhi4_neg1>
 354:	77 fd       	sbrc	r23, 7
 356:	04 d0       	rcall	.+8      	; 0x360 <__divmodhi4_neg2>
 358:	49 d0       	rcall	.+146    	; 0x3ec <__udivmodhi4>
 35a:	06 d0       	rcall	.+12     	; 0x368 <__divmodhi4_neg1>
 35c:	00 20       	and	r0, r0
 35e:	1a f4       	brpl	.+6      	; 0x366 <__divmodhi4_exit>

00000360 <__divmodhi4_neg2>:
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255

00000366 <__divmodhi4_exit>:
 366:	08 95       	ret

00000368 <__divmodhi4_neg1>:
 368:	f6 f7       	brtc	.-4      	; 0x366 <__divmodhi4_exit>
 36a:	90 95       	com	r25
 36c:	81 95       	neg	r24
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	08 95       	ret

00000372 <__udivmodsi4>:
 372:	a1 e2       	ldi	r26, 0x21	; 33
 374:	1a 2e       	mov	r1, r26
 376:	aa 1b       	sub	r26, r26
 378:	bb 1b       	sub	r27, r27
 37a:	fd 01       	movw	r30, r26
 37c:	0d c0       	rjmp	.+26     	; 0x398 <__udivmodsi4_ep>

0000037e <__udivmodsi4_loop>:
 37e:	aa 1f       	adc	r26, r26
 380:	bb 1f       	adc	r27, r27
 382:	ee 1f       	adc	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	a2 17       	cp	r26, r18
 388:	b3 07       	cpc	r27, r19
 38a:	e4 07       	cpc	r30, r20
 38c:	f5 07       	cpc	r31, r21
 38e:	20 f0       	brcs	.+8      	; 0x398 <__udivmodsi4_ep>
 390:	a2 1b       	sub	r26, r18
 392:	b3 0b       	sbc	r27, r19
 394:	e4 0b       	sbc	r30, r20
 396:	f5 0b       	sbc	r31, r21

00000398 <__udivmodsi4_ep>:
 398:	66 1f       	adc	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	88 1f       	adc	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	1a 94       	dec	r1
 3a2:	69 f7       	brne	.-38     	; 0x37e <__udivmodsi4_loop>
 3a4:	60 95       	com	r22
 3a6:	70 95       	com	r23
 3a8:	80 95       	com	r24
 3aa:	90 95       	com	r25
 3ac:	9b 01       	movw	r18, r22
 3ae:	ac 01       	movw	r20, r24
 3b0:	bd 01       	movw	r22, r26
 3b2:	cf 01       	movw	r24, r30
 3b4:	08 95       	ret

000003b6 <__divmodsi4>:
 3b6:	97 fb       	bst	r25, 7
 3b8:	09 2e       	mov	r0, r25
 3ba:	05 26       	eor	r0, r21
 3bc:	0e d0       	rcall	.+28     	; 0x3da <__divmodsi4_neg1>
 3be:	57 fd       	sbrc	r21, 7
 3c0:	04 d0       	rcall	.+8      	; 0x3ca <__divmodsi4_neg2>
 3c2:	d7 df       	rcall	.-82     	; 0x372 <__udivmodsi4>
 3c4:	0a d0       	rcall	.+20     	; 0x3da <__divmodsi4_neg1>
 3c6:	00 1c       	adc	r0, r0
 3c8:	38 f4       	brcc	.+14     	; 0x3d8 <__divmodsi4_exit>

000003ca <__divmodsi4_neg2>:
 3ca:	50 95       	com	r21
 3cc:	40 95       	com	r20
 3ce:	30 95       	com	r19
 3d0:	21 95       	neg	r18
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	4f 4f       	sbci	r20, 0xFF	; 255
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255

000003d8 <__divmodsi4_exit>:
 3d8:	08 95       	ret

000003da <__divmodsi4_neg1>:
 3da:	f6 f7       	brtc	.-4      	; 0x3d8 <__divmodsi4_exit>
 3dc:	90 95       	com	r25
 3de:	80 95       	com	r24
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255
 3e6:	8f 4f       	sbci	r24, 0xFF	; 255
 3e8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <__udivmodhi4>:
 3ec:	aa 1b       	sub	r26, r26
 3ee:	bb 1b       	sub	r27, r27
 3f0:	51 e1       	ldi	r21, 0x11	; 17
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <__udivmodhi4_ep>

000003f4 <__udivmodhi4_loop>:
 3f4:	aa 1f       	adc	r26, r26
 3f6:	bb 1f       	adc	r27, r27
 3f8:	a6 17       	cp	r26, r22
 3fa:	b7 07       	cpc	r27, r23
 3fc:	10 f0       	brcs	.+4      	; 0x402 <__udivmodhi4_ep>
 3fe:	a6 1b       	sub	r26, r22
 400:	b7 0b       	sbc	r27, r23

00000402 <__udivmodhi4_ep>:
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	5a 95       	dec	r21
 408:	a9 f7       	brne	.-22     	; 0x3f4 <__udivmodhi4_loop>
 40a:	80 95       	com	r24
 40c:	90 95       	com	r25
 40e:	bc 01       	movw	r22, r24
 410:	cd 01       	movw	r24, r26
 412:	08 95       	ret

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
